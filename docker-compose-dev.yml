
name:  nano-bestiary-dev

services:

  ms-creature-write-db:
    image: mongo:8.0.3-noble
    container_name: ms-creature-write-db
    environment:
      MONGO_INITDB_DATABASE: mongo-write-db
      MONGO_INITDB_ROOT_USERNAME: sa
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASS_WRITE}
    networks:
      - nano-bestiary-net
    ports:
      - 27017:27017 
    restart: on-failure:3
    healthcheck: &healthcheck-write-db
      test: "echo 'db.runCommand(\"ping\").ok'"
      interval: 5s
      timeout: 5s
      retries: 3

  ms-creature-read-db:
    image: postgres:17.1-alpine
    container_name: ms-creature-read-db
    environment:
       POSTGRES_PASSWORD: ${SQLDB_PASS}
       POSTGRES_USER: root
       POSTGRES_DB: creatureReadDb
    volumes:
      - ./databases/ms-creature/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - nano-bestiary-net
    ports:
      - 5432:5432
    restart: on-failure:3
    healthcheck: &healthcheck-read-db
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
       
  ms-creature-redis-db:
    image: redis:7.4-alpine
    container_name: ms-creature-redis-db
    networks:
      - nano-bestiary-net
    ports:
      - 6379:6379
    restart: on-failure:3
    healthcheck: &healthcheck-redis-db
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      
  ms-area-write-db:
    image: mongo:8.0.3-noble
    container_name: ms-area-write-db
    environment:
      MONGO_INITDB_DATABASE: mongo-write-db
      MONGO_INITDB_ROOT_USERNAME: sa
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASS_WRITE}    
    networks:
      - nano-bestiary-net
    ports:
      - 27018:27017
    restart: on-failure:3
    healthcheck: *healthcheck-write-db
  
  ms-area-read-db:
    image: postgres:17.1-alpine
    container_name: ms-area-read-db
    environment:
       POSTGRES_PASSWORD: ${SQLDB_PASS}
       POSTGRES_USER: root
       POSTGRES_DB: areaReadDb
    volumes:
      - ./databases/ms-area/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
     - nano-bestiary-net
    ports:
      - 5433:5432
    restart: on-failure:3
    healthcheck: *healthcheck-read-db
      
  ms-area-redis-db:
    image: redis:7.4-alpine
    container_name: ms-area-redis-db
    networks:
      - nano-bestiary-net
    ports:
      - 6380:6379
    restart: on-failure:3
    healthcheck: *healthcheck-redis-db
      
  kafka:
    image: bitnami/kafka:3.8
    container_name: kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_KRAFT_CLUSTER_ID=nige-jozu-kafka
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,EXTERNAL://kafka:29092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes    
      - KAFKA_AUTO_OFFSET_RESET=earliest       
      - BITNAMI_DEBUG=true        
#    volumes:
#      - kafka_persistent:/var/lib/kafka
    networks:
      - nano-bestiary-net
    ports:
      - 9092:9092
      - 9093:9093
      - 29092:29092
    restart: on-failure:3
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9092; exit $$?;'"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: nige-jozu-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - nano-bestiary-net
    ports:
      - 8081:8080
    restart: on-failure:3    
    depends_on:
      kafka:
        condition: service_healthy

  kafka-data:
    build: ./databases/kafka-data
    container_name: kafka-data
    volumes:
      - ./databases/kafka-data/init-kafka-data.sh:/init-kafka-data.sh
    command: ["/bin/bash", "/init-kafka-data.sh", "29092"]
    networks:
      - nano-bestiary-net
    depends_on:
      kafka:
        condition: service_healthy
        
   
networks:
  nano-bestiary-net:
    name: nano-bestiary-net
    ipam:
      config:
        - subnet: 172.23.33.0/24
          gateway: 172.23.33.1
          
  